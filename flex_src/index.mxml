<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" horizontalScrollPolicy="off"
	layout="vertical" verticalScrollPolicy="off"
	xmlns:map="br.com.zort.map.*" xmlns:console="br.com.zort.console.*"
	xmlns:char="br.com.zort.char.*" xmlns:messaging="br.com.zort.messaging.*"
	xmlns:persistence="br.com.zort.persistence.*" xmlns:local="*"
	xmlns:battle="br.com.zort.view.battle.*" xmlns:login="br.com.zort.view.login.*">

	<mx:Style source="br/com/zort/assets/css/Main.css"/>

	<mx:Script>
		<![CDATA[
			import br.com.zort.assets.Assets;
			import br.com.zort.model.User;
			import br.com.zort.service.UserService;
			import br.com.zort.view.battle.BattleEndMessage;
			import br.com.zort.model.Skill;
			import br.com.zort.event.SkillEvent;
			import br.com.zort.model.Robot;
			import br.com.zort.view.battle.BattleRequestResponse;
			import br.com.zort.model.BattleRequest;
			import br.com.zort.view.battle.BetTitleWindow;
			import br.com.zort.view.store.StoreList;
			import br.com.zort.view.robot.RobotItems;
			import br.com.zort.view.user.UserList;
			import br.com.zort.view.item.ItemList;
			import br.com.zort.char.CharEvent;
			import br.com.zort.model.PrivateTalk;
			import mx.events.DynamicEvent;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import br.com.zort.console.event.ConsoleEvent;
			import br.com.zort.model.Talk;
			import br.com.zort.messaging.event.MessagingEvent;
			import br.com.zort.helper.ClassHelper;
			import br.com.zort.model.MapTile;
			import br.com.zort.map.event.MapEvent;
			import br.com.zort.model.Person;
			import br.com.zort.service.PersonService;
			import mx.controls.Alert;
			import br.com.zort.model.Map;
			import mx.rpc.events.ResultEvent;
			import br.com.zort.service.MapService;
			import mx.collections.ArrayCollection;

			[Bindable]
			private var squareSize:Number;

			private var peopleSetuped:Boolean = false;

			private var popupUserList:UserList;
			private var popupItemList:ItemList;
			private var popupRobotList:RobotItems;
			private var popupStoreList:StoreList;
			private var popupBet:BetTitleWindow;
			private var popupBattleRequest:BattleRequestResponse;

			[Bindable]
			private var enemyRobot:Robot;
			private var enemyPerson:Person;
			private var breq:BattleRequest;

			private function getMapById(id:int):void
			{
				new MapService(onGetMapResult).getMapById(id);
			}

			private function setUpPerson():void
			{
				if(!peopleSetuped)
				{
					peopleSetuped = true;
					var p:Person = loginView.loggedUser.person;
					message.char = p;
					chara.person = p;
					console.person = p;
					message.sendLogged();
					message.sendPositionRequest();
				}
			}

			private function onGetMapResult(event:ResultEvent):void
			{
				setUpPerson();
				var m:Map = Map(event.result);
				squareSize = m.squareSize;
				message.map = m;
				holder.map = m;
			}

			private function onCharDance(event:MapEvent):void
			{
				chara.changeCharByKeyCode(Number(event.data))
			}

			private function onCharMove(event:MapEvent):void
			{
				message.sendPosition(MapTile(event.data));
			}

			//Message Events
			private function onLoggedIn(event:MessagingEvent):void
			{
				var person:Person = ClassHelper.getClassByType(event.classes, Person);
			}

			private function onPosition(event:MessagingEvent):void
			{
				var map:Map = ClassHelper.getClassByType(event.classes, Map);
				var mapTile:MapTile = ClassHelper.getClassByType(event.classes, MapTile);
				var person:Person = ClassHelper.getClassByType(event.classes, Person);
				if(holder != null)
				{
					holder.updateCharPosition(map, person, mapTile);
				}
			}

			private function onTeleportJoin(event:MapEvent):void
			{
				message.sendCharTeleported();
				getMapById(Number(event.data))
			}

			private function onLoggedOut(event:MessagingEvent):void
			{
				var person:Person = ClassHelper.getClassByType(event.classes, Person);
				if(holder != null)
				{
					holder.removeChar(person);
				}
			}

			private function onTeleported(event:MessagingEvent):void
			{
				var person:Person = ClassHelper.getClassByType(event.classes, Person);
				holder.removeChar(person);
			}

			private function onMessagingReceive(event:MessagingEvent):void
			{
				var person:Person = ClassHelper.getClassByType(event.classes, Person);
				var talk:Talk = ClassHelper.getClassByType(event.classes, Talk);

				holder.showMessage(person, talk);
				console.addMessage(person, talk.message);
			}

			private function onTypedText(event:ConsoleEvent):void
			{
				var msg:String = String(event.data);

				if(msg.indexOf("@") == 0)
				{
					var pt:PrivateTalk = new PrivateTalk();
					pt.message = msg;
					message.sendPrivateMessage(pt);
				}
				else
				{
					chara.setText(msg);
					var t:Talk = new Talk();
					t.message = msg;
					message.sendMessage(t);
				}
			}

			private function onLogin():void
			{
				vs.selectedIndex = 1;
				message.connect();
			}

			private function mapCreated():void
			{
				new MapService(onGetMapResult).getMapById(7);
			}

			private function addUserList():void
			{
				if(popupUserList == null)
				{
					popupUserList = UserList(PopUpManager.createPopUp(this, UserList));
					popupUserList.height = holder.height;
					popupUserList.width = 200;
					popupUserList.x = holder.x + holder.width - popupUserList.width;
					popupUserList.dataProvider = holder.personsCollection;

					popupUserList.addEventListener(CloseEvent.CLOSE, onUserListClose);
					popupUserList.addEventListener("userClick", userClickHandler);
				}
			}

			private function addItemList():void
			{
				if(popupItemList == null)
				{
					popupItemList = ItemList(PopUpManager.createPopUp(this, ItemList));
					popupItemList.user = loginView.loggedUser;
					popupItemList.height = holder.height;
					popupItemList.width = 200;
					popupItemList.x = holder.x + holder.width - popupItemList.width;
					popupItemList.addEventListener(CloseEvent.CLOSE, onItemListClose);
				}
			}

			private function addStoreList():void
			{
				if(popupStoreList == null)
				{
					popupStoreList = StoreList(PopUpManager.createPopUp(this, StoreList));
					popupStoreList.height = holder.height - 30;
					popupStoreList.width = 200;
					popupStoreList.user = loginView.loggedUser;
					popupStoreList.x = holder.x + holder.width - popupStoreList.width;
					popupStoreList.addEventListener(CloseEvent.CLOSE, onStoreClose);
				}
			}

			private function addRobotList():void
			{
				if(popupRobotList == null)
				{
					popupRobotList = RobotItems(PopUpManager.createPopUp(this, RobotItems));
					popupRobotList.x = holder.x + holder.width - popupRobotList.width;
					popupRobotList.user = loginView.loggedUser;
					popupRobotList.robot = loginView.loggedUser.robot;
					popupRobotList.addEventListener(CloseEvent.CLOSE, onRobotListClose);
				}
			}

			private function onBattle(event:CharEvent):void
			{
				popupBet = BetTitleWindow(PopUpManager.createPopUp(this, BetTitleWindow, true));
				popupBet.money = loginView.loggedUser.money;
				popupBet.personToBet = event.person;
				PopUpManager.centerPopUp(popupBet);
				popupBet.addEventListener(CloseEvent.CLOSE, onBetClose);
				popupBet.addEventListener("bet", onBet);
			}

			private function onBet(event:Event):void
			{
				var pb:BetTitleWindow = BetTitleWindow(event.currentTarget);
				var breq:BattleRequest = new BattleRequest();
				breq.battleOrigin = loginView.loggedUser.person;
				breq.battleDestin = pb.personToBet;
				enemyPerson = pb.personToBet;
				breq.betValue = pb.bet;

				message.sendBattleRequest(breq, loginView.loggedUser.robot);
				PopUpManager.removePopUp(popupBet);
				popupBet = null;
			}

			private function userClickHandler(event:DynamicEvent):void
			{
				console.txtConsole.text = "@" + event.name + " ";
				callLater(function()
					{
						console.setFocus();
					});
			}

			private function onUserListClose(event:CloseEvent):void
			{
				PopUpManager.removePopUp(popupUserList);
				popupUserList = null;
			}

			private function onBetClose(event:CloseEvent):void
			{
				PopUpManager.removePopUp(popupBet);
				popupBet = null;
			}

			private function onItemListClose(event:CloseEvent):void
			{
				PopUpManager.removePopUp(popupItemList);
				popupItemList = null;
			}

			private function onRobotListClose(event:CloseEvent):void
			{
				PopUpManager.removePopUp(popupRobotList);
				popupRobotList = null;
			}

			private function onStoreClose(event:CloseEvent):void
			{
				PopUpManager.removePopUp(popupStoreList);
				popupStoreList = null;
			}

			protected function onBattleRequest(event:MessagingEvent):void
			{
				var breq:BattleRequest = ClassHelper.getClassByType(event.classes, BattleRequest);
				enemyPerson = breq.battleOrigin;
				enemyRobot = ClassHelper.getClassByType(event.classes, Robot);
				popupBattleRequest = BattleRequestResponse(PopUpManager.createPopUp(this, BattleRequestResponse, true));
				popupBattleRequest.setBattleRequest(breq);
				PopUpManager.centerPopUp(popupBattleRequest);
				popupBattleRequest.addEventListener(CloseEvent.CLOSE, onBattleRequestClose);
				popupBattleRequest.addEventListener("battleAccepted", onBattleRequestAccepted);
			}

			private function onBattleRequestClose(event:CloseEvent):void
			{
				PopUpManager.removePopUp(popupBattleRequest);
				popupBattleRequest = null;
			}

			private function onBattleRequestAccepted(event:Event):void
			{
				var brr:BattleRequestResponse = BattleRequestResponse(event.currentTarget);
				breq = brr.getBattleRequest();
				message.sendBattleAccepted(brr.getBattleRequest(), loginView.loggedUser.robot);
				vs.selectedIndex = 2;
				onBattleRequestClose(null);
			}

			private function onBattleAccepted(event:MessagingEvent):void
			{
				enemyRobot = ClassHelper.getClassByType(event.classes, Robot);
				breq = ClassHelper.getClassByType(event.classes, BattleRequest);
				vs.selectedIndex = 2;
			}

			private function onSkillStart(event:SkillEvent):void
			{
				message.sendSkillStart(event.skill, enemyPerson);
			}

			private function onEnemySkillStart(event:MessagingEvent):void
			{
				var skill:Skill = ClassHelper.getClassByType(event.classes, Skill);
				enemyBattleRobot.startSkill(skill);
			}

			private function endGame(message:String):void
			{
				var b:BattleEndMessage = BattleEndMessage(PopUpManager.createPopUp(this, BattleEndMessage));
				b.addEventListener("finishedBattle", onFinishedBattle);
				b.width = this.width;
				b.height = 420;
				PopUpManager.centerPopUp(b);
				b.text = message;
			}

			private function youWin():void
			{
				endGame('GANHOU');
				new UserService(updateUser).setUserWin(loginView.loggedUser, breq.betValue, enemyRobot.level);
			}

			private function youLose():void
			{
				endGame('PERDEU');
				new UserService(updateUser).setUserLose(loginView.loggedUser, breq.betValue);
			}

			private function updateUser(event:ResultEvent):void
			{
				var u:User = User(event.result);
				u.person.newId = u.id;
				u.person.newName = u.nome;
				loginView.loggedUser = u;
			}

			private function onFinishedBattle(event:Event):void
			{
				vs.selectedIndex = 1;
			}
		]]>
	</mx:Script>

	<mx:Parallel id="hideEffect">
		<mx:Blur duration="1000" blurXFrom="0.0" blurXTo="10.0" blurYFrom="0.0" blurYTo="10.0"/>
		<mx:Fade duration="1000" alphaFrom="1" alphaTo="0"/>
	</mx:Parallel>
	<mx:Parallel id="showEffect">
		<mx:Blur duration="1000" blurXFrom="10.0" blurXTo="0.0" blurYFrom="10.0" blurYTo="0.0"/>
		<mx:Fade duration="1000" alphaFrom="0" alphaTo="1"/>
	</mx:Parallel>

	<messaging:Message id="message" LOGGEDIN="onLoggedIn(event)" POSITION="onPosition(event)"
		TELEPORTED="onTeleported(event)" MESSAGING="onMessagingReceive(event)"
		LOGGEDOUT="onLoggedOut(event)" PRIVATEMESSAGE="onMessagingReceive(event)"
		BATTLEREQUEST="onBattleRequest(event)" BATTLEACCEPTED="onBattleAccepted(event)"
		BATTLEFIELDSKILLSTART="onEnemySkillStart(event)"/>
	<mx:ViewStack id="vs" height="430" width="900">
		<mx:Canvas height="100%" width="100%" hideEffect="{hideEffect}">
			<login:Login id="loginView" Login="onLogin()"/>
		</mx:Canvas>
		<mx:VBox height="100%" width="100%" horizontalAlign="center" verticalAlign="middle"
			hideEffect="{hideEffect}" showEffect="{showEffect}">
			<mx:Canvas id="container" height="420" width="100%">
				<map:MapHolder id="holder" height="100%" width="100%"
					creationComplete="mapCreated();" teleport="onTeleportJoin(event)"
					charDance="onCharDance(event)" charMove="onCharMove(event)"
					charInitialize="onCharMove(event)" battle="onBattle(event)"/>
				<char:Char id="chara" height="{squareSize}" width="{squareSize}"
					x="{container.width/2 - squareSize/2}" y="{container.height/2 - squareSize/2}"/>
				<console:Console id="console" height="200" width="350" x="3"
					y="{container.height-200-3}" backgroundAlpha="0.5"
					typeText="onTypedText(event)"/>
				<mx:HBox horizontalAlign="right" right="5" top="5">
					<mx:Image height="32" source="{Assets.cart}" toolTip="Loja" width="32"
						click="addStoreList()" useHandCursor="true" buttonMode="true"/>
					<mx:Image height="32" source="{Assets.robot}" toolTip="Robô" width="32"
						click="addRobotList()" useHandCursor="true" buttonMode="true"/>
					<mx:Image height="32" source="{Assets.bag}" toolTip="Mochila" width="32"
						click="addItemList()" useHandCursor="true" buttonMode="true"/>
					<mx:Image height="32" source="{Assets.friends}" toolTip="Amigos" width="32"
						click="addUserList()" useHandCursor="true" buttonMode="true"/>
				</mx:HBox>
				<mx:HBox backgroundAlpha="0.3" backgroundColor="0x000000" borderStyle="solid"
					borderThickness="0" cornerRadius="4" left="5" paddingBottom="5" paddingLeft="5"
					paddingRight="5" paddingTop="5" top="5">
					<mx:Image height="20" source="{Assets.coin}" width="20"/>
					<mx:Label text="{loginView.loggedUser.money}" color="#FFFFFF"/>
				</mx:HBox>
			</mx:Canvas>
		</mx:VBox>
		<mx:HBox height="420" width="100%" horizontalAlign="center" verticalAlign="middle"
			hideEffect="{hideEffect}" showEffect="{showEffect}">
			<battle:BattleRobot id="myBattleRobot" height="100%" width="100%"
				robot="{loginView.loggedUser.robot}" skillStart="onSkillStart(event);"
				skillDone="enemyBattleRobot.calculateDamage(event, loginView.loggedUser.robot)"
				endGame="youLose()"/>
			<mx:VRule height="100%"/>
			<battle:BattleRobot id="enemyBattleRobot" height="100%" width="100%"
				robot="{enemyRobot}" skillEnable="false" endGame="youWin()"
				skillDone="myBattleRobot.calculateDamage(event, enemyRobot)"/>
		</mx:HBox>
	</mx:ViewStack>
</mx:Application>
